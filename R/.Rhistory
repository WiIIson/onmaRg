seq(1, 5, length.out=5)
(1, 5, length.out=6)
seq(1, 5, length.out=6)
(1, 5, length.out=5)
seq(1, 5, length.out=5)
seq(1, 5, length.out=6)
seq(0, 5, length.out=6)
seq(1, 5, length.out=6)
for (i in 1:5) print(i)
return new_x
return(new_x)
for (i in 0:len(x)) {
for (j in 1:5) {
if (x[i] < quint[j]) {
new_x[i] <- j
break
}
}
}
min_x <- min(x)
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
for (i in 0:length(x)) {
for (j in 1:5) {
if (x[i] < quint[j]) {
new_x[i] <- j
break
}
}
}
return(new_x)
}
View(om_quint)
om_quint(c(1, 2, 3, 2, 4, 3, 1.1))
print(quint)
View(om_quint)
print(
"hello"
)
print(quint)
quint <- seq(min_x, max_x, length.out=6)
quint <- seq(min_x, max_x, length.out=6)
print(max_x)
print(min_x)
print(quint)
for (i in 0:length(x)) {
for (j in 1:5) {
if (x[i] < quint[j]) {
new_x[i] <- j
break
}
}
}
return(new_x)
om_quint <- function(vals) {
max_x <- max(vals)
min_x <- min(vals)
quint <- seq(min_x, max_x, length.out=6)
print(max_x)
print(min_x)
print(quint)
for (i in 0:length(x)) {
for (j in 1:5) {
if (x[i] < quint[j]) {
new_x[i] <- j
break
}
}
}
return(new_x)
}
print(quint)
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
print(max_x)
print(min_x)
print(quint)
for (i in 0:length(x)) {
for (j in 1:5) {
if (x[i] < quint[j]) {
new_x[i] <- j
break
}
}
}
return(new_x)
}
View(om_quint)
if (x[i] < quint[j]) {
new_x[i] <- j
break
}
print("hello")
print(max_x)
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
print(max_x)
print(min_x)
print(quint)
for (i in 0:length(x)) {
for (j in 1:5) {
if (x[i] < quint[j]) {
new_x[i] <- j
break
}
}
}
return(new_x)
}
View(om_quint)
om_quint(c(1,2,3,4,5,6,7,8,9,10))
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
print(max_x)
print(min_x)
print(quint)
for (i in 0:length(x)) {
for (j in 1:5) {
if (x[i] < quint[j]) {
new_x[i] <- j
}
else {
break
}
}
}
return(new_x)
}
om_quint(c(1,2,3,4,5,6,7,8,9,10))
x <- c(1,2,3,4,5,6,7,8,9,10)
print(length(x))
print(x[0])
print(x[1])
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
print(max_x)
print(min_x)
print(quint)
for (i in 1:length(x)) {
for (j in 2:6) {
if (x[i] < quint[j]) {
new_x[i] <- j
}
else {
break
}
}
}
return(new_x)
}
om_quint(c(1,2,3,4,5,6,7,8,9,10))
new_x <- c()
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
print(max_x)
print(min_x)
print(quint)
new_x <- c()
for (i in 1:length(x)) {
for (j in 2:6) {
if (x[i] < quint[j]) {
new_x[i] <- j - 1
}
else {
break
}
}
}
return(new_x)
}
om_quint(c(1,2,3,4,5,6,7,8,9,10))
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
print(max_x)
print(min_x)
print(quint)
new_x <- c()
for (i in 1:length(x)) {
for (j in 2:6) {
if (x[i] < quint[j]) {
new_x[i] <- j - 1
break
}
}
}
return(new_x)
}
om_quint(c(1,2,3,4,5,6,7,8,9,10))
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
print(max_x)
print(min_x)
print(quint)
new_x <- c()
for (i in 1:length(x)) {
for (j in 2:6) {
if (x[i] =< quint[j]) {
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
print(max_x)
print(min_x)
print(quint)
new_x <- c()
for (i in 1:length(x)) {
for (j in 2:6) {
if (x[i] =< quint[j]) {
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
print(max_x)
print(min_x)
print(quint)
new_x <- c()
for (i in 1:length(x)) {
for (j in 2:6) {
if (x[i] <= quint[j]) {
new_x[i] <- j - 1
break
}
}
}
return(new_x)
}
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
print(max_x)
print(min_x)
print(quint)
new_x <- c()
for (i in 1:length(x)) {
for (j in 2:6) {
if (x[i] <= quint[j]) {
new_x[i] <- j - 1
break
}
}
}
return(new_x)
}
om_quint(c(1,2,3,4,5,6,7,8,9,10))
library(onmaRg)
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
new_x <- c()
for (i in 1:length(x)) {
for (j in 2:6) {
if (x[i] <= quint[j]) {
new_x[i] <- j - 1
break
}
}
}
return(new_x)
}
?om_geo
library(onmaRg)
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
new_x <- c()
for (i in 1:length(x)) {
for (j in 2:6) {
if (x[i] <= quint[j]) {
new_x[i] <- j - 1
break
}
}
}
return(new_x)
}
toronto_dat <- om_geo(2016, "DAUID", "sf") %>%
filter(CSDNAME == "Toronto")
?laply
?lapply
toronto_dat$DEPRIVATION_Q_DA16 <- om_quint(toronto_dat$DEPRIVATION_DA16)
View(toronto_dat)
om_quint <- function(x) {
max_x <- max(x)
min_x <- min(x)
quint <- seq(min_x, max_x, length.out=6)
new_x <- c()
for (i in 1:length(x)) {
if (x[i] == NA) {
new_x[i] <- NA
}
else {
for (j in 2:6) {
if (x[i] <= quint[j]) {
new_x[i] <- j - 1
break
}
}
}
}
return(new_x)
}
toronto_dat$DEPRIVATION_Q_DA16 <- om_quint(toronto_dat$DEPRIVATION_DA16)
om_quint(c(1,2,3,4,5,6,7,8, NA, 9,10))
om_quint <- function(x) {
vals <- x[x != NA]
max_x <- max(vals)
min_x <- min(vals)
quint <- seq(min_x, max_x, length.out=6)
new_x <- c()
for (i in 1:length(x)) {
if (x[i] == NA) {
new_x[i] <- NA
}
else {
for (j in 2:6) {
if (x[i] <= quint[j]) {
new_x[i] <- j - 1
break
}
}
}
}
return(new_x)
}
om_quint(c(1,2,3,4,5,6,7,8, NA, 9,10))
x <- c(1,2,3,4,5,6,7,8, NA, 9,10)
print(x)
print(x[x != NA])
print(x[!= NA])
print(x[!is.na(x)])
om_quint <- function(x) {
vals <- x[!is.na(x)]
max_x <- max(vals)
min_x <- min(vals)
quint <- seq(min_x, max_x, length.out=6)
new_x <- c()
for (i in 1:length(x)) {
if (x[i] == NA) {
new_x[i] <- NA
}
else {
for (j in 2:6) {
if (x[i] <= quint[j]) {
new_x[i] <- j - 1
break
}
}
}
}
return(new_x)
}
om_quint(c(1,2,3,4,5,6,7,8, NA, 9,10))
om_quint <- function(x) {
vals <- x[!is.na(x)]
max_x <- max(vals)
min_x <- min(vals)
quint <- seq(min_x, max_x, length.out=6)
new_x <- c()
for (i in 1:length(x)) {
if (is.na(x[i])) {
new_x[i] <- NA
}
else {
for (j in 2:6) {
if (x[i] <= quint[j]) {
new_x[i] <- j - 1
break
}
}
}
}
return(new_x)
}
om_quint(c(1,2,3,4,5,6,7,8, NA, 9,10))
toronto_dat$DEPRIVATION_Q_DA16 <- om_quint(toronto_dat$DEPRIVATION_DA16)
library(onmaRg)
library(ggplot2)
om_quint <- function(x) {
vals <- x[!is.na(x)]
max_x <- max(vals)
min_x <- min(vals)
quint <- seq(min_x, max_x, length.out=6)
new_x <- c()
for (i in 1:length(x)) {
if (is.na(x[i])) {
new_x[i] <- NA
}
else {
for (j in 2:6) {
if (x[i] <= quint[j]) {
new_x[i] <- j - 1
break
}
}
}
}
return(new_x)
}
toronto_dat1 <- om_geo(2016, "DAUID", "sf") %>%
filter(CSDNAME == "Toronto")
toronto_dat2 <- toronto_dat1
toronto_dat2$DEPRIVATION_Q_DA16 <- om_quint(toronto_dat2$DEPRIVATION_DA16)
ggplot(data=toronto_dat1, aes(fill=DEPRIVATION_Q_DA16)) +
geom_sf()
ggplot(data=toronto_dat2, aes(fill=DEPRIVATION_Q_DA16)) +
geom_sf()
?quantile
x
quantile(x)
quantile(x, na.rm = true)
quantile(x, na.rm = TRUE)
quantile(x, probs=seq(0,1,0.2) na.rm = TRUE)
quantile(x, probs=seq(0,1,0.2), na.rm = TRUE)
qu <- quantile(x, probs=seq(0,1,0.2), na.rm = TRUE)
qu
qu[1]
4 > qu[1]
om_quint <- function(x) {
quint <- quantile(x, probs=seq(0,1,0.2), na.rm=TRUE)
new_x <- c()
for (i in 1:length(x)) {
if (is.na(x[i])) {
new_x[i] <- NA
}
else {
for (j in 2:6) {
if (x[i] <= quint[j]) {
new_x[i] <- j - 1
break
}
}
}
}
return(new_x)
}
toronto_dat1 <- om_geo(2016, "DAUID", "sf") %>%
filter(CSDNAME == "Toronto")
toronto_dat2 <- toronto_dat1
toronto_dat2$DEPRIVATION_Q_DA16 <- om_quint(toronto_dat2$DEPRIVATION_DA16)
ggplot(data=toronto_dat1, aes(fill=DEPRIVATION_Q_DA16)) +
geom_sf()
ggplot(data=toronto_dat2, aes(fill=DEPRIVATION_Q_DA16)) +
geom_sf()
table(toronto_dat2$DEPRIVATION_Q_DA16)
?quantile

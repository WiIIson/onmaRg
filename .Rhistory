titlePanel("Sunshine List Member Data"),
fluidRow(
column(3,
radioButtons(
"Stat_Display",
"Statistic Shown",
c(
"Count"="num",
"Average"="avg",
"Maximum"="max"
)
),
radioButtons(
"Division",
"Division",
c(
"Overall"="none",
"Gender"="gender"
)
)
)
),
fluidRow(
plotOutput("Sunshine_Display", height=600)
)
)
server <- function(input, output, session) {
observeEvent(input$Stat_Display, {
output$Sunshine_Display <- renderPlot(
get_data(input$Stat_Display, input$Division)
)
})
observeEvent(input$Division, {
output$Sunshine_Display <- renderPlot(
get_data(input$Stat_Display, input$Division)
)
})
}
shinyApp(ui, server)
get_data <- function(method, division) {
# Determines the division of the data
if (division=="none") {
working_data <- sunshine_data %>%
group_by(Calendar.Year)
}
else if (division=="gender") {
working_data <- sunshine_data %>%
group_by(Calendar.Year, gender)
}
# Determines the statistic to report
if (method=="num") {
working_data <- working_data %>%
summarise(entries=n())
}
else if (method=="avg") {
working_data <- working_data %>%
summarise(entries=mean(Salary.Paid))
}
else if (method=="max") {
working_data <- working_data %>%
summarise(entries=max(Salary.Paid))
}
print(working_data)
# Generates the plot
if(division=="none") {
plot <- ggplot(data=working_data, aes(x=Calendar.Year, y=entries)) +
geom_bar(stat="identity")
}
else {
plot <- ggplot(data=working_data, aes(x=Calendar.Year, y=entries, fill=gender)) +
geom_bar(stat="identity", position="fill") +
geom_hline(yintercept=0.5)
}
return(plot)
}
get_data("sum", "none")
get_data <- function(method, division) {
# Determines the division of the data
if (division=="none") {
working_data <- sunshine_data %>%
group_by(Calendar.Year)
}
else if (division=="gender") {
working_data <- sunshine_data %>%
group_by(Calendar.Year, gender)
}
# Determines the statistic to report
if (method=="num") {
working_data <- working_data %>%
summarise(entries=n())
}
else if (method=="avg") {
working_data <- working_data %>%
summarise(entries=mean(Salary.Paid))
}
else if (method=="max") {
working_data <- working_data %>%
summarise(entries=max(Salary.Paid))
}
working_data <- data.frame(working_data)
print(working_data)
# Generates the plot
if(division=="none") {
plot <- ggplot(data=working_data, aes(x=Calendar.Year, y=entries)) +
geom_bar(stat="identity")
}
else {
plot <- ggplot(data=working_data, aes(x=Calendar.Year, y=entries, fill=gender)) +
geom_bar(stat="identity", position="fill") +
geom_hline(yintercept=0.5)
}
return(plot)
}
get_data("sum", "none")
get_data("num", "none")
get_data("num", "gender")
get_data <- function(method, division) {
# Determines the division of the data
if (division=="none") {
working_data <- sunshine_gender %>%
group_by(Calendar.Year)
}
else if (division=="gender") {
working_data <- sunshine_gender %>%
group_by(Calendar.Year, gender)
}
# Determines the statistic to report
if (method=="num") {
working_data <- working_data %>%
summarise(entries=n())
}
else if (method=="avg") {
working_data <- working_data %>%
summarise(entries=mean(Salary.Paid))
}
else if (method=="max") {
working_data <- working_data %>%
summarise(entries=max(Salary.Paid))
}
working_data <- data.frame(working_data)
print(working_data)
# Generates the plot
if(division=="none") {
plot <- ggplot(data=working_data, aes(x=Calendar.Year, y=entries)) +
geom_bar(stat="identity")
}
else {
plot <- ggplot(data=working_data, aes(x=Calendar.Year, y=entries, fill=gender)) +
geom_bar(stat="identity", position="fill") +
geom_hline(yintercept=0.5)
}
return(plot)
}
ui <- fluidPage(
titlePanel("Sunshine List Member Data"),
fluidRow(
column(3,
radioButtons(
"Stat_Display",
"Statistic Shown",
c(
"Count"="num",
"Average"="avg",
"Maximum"="max"
)
),
radioButtons(
"Division",
"Division",
c(
"Overall"="none",
"Gender"="gender"
)
)
)
),
fluidRow(
plotOutput("Sunshine_Display", height=600)
)
)
server <- function(input, output, session) {
observeEvent(input$Stat_Display, {
output$Sunshine_Display <- renderPlot(
get_data(input$Stat_Display, input$Division)
)
})
observeEvent(input$Division, {
output$Sunshine_Display <- renderPlot(
get_data(input$Stat_Display, input$Division)
)
})
}
shinyApp(ui, server)
get_data <- function(method, division) {
# Determines the division of the data
if (division=="none") {
working_data <- sunshine_gender %>%
group_by(Calendar.Year)
}
else if (division=="gender") {
working_data <- sunshine_gender %>%
group_by(Calendar.Year, gender)
}
# Determines the statistic to report
if (method=="num") {
working_data <- working_data %>%
summarise(entries=n())
}
else if (method=="avg") {
working_data <- working_data %>%
summarise(entries=mean(Salary.Paid))
}
else if (method=="max") {
working_data <- working_data %>%
summarise(entries=max(Salary.Paid))
}
working_data <- data.frame(working_data)
print(working_data)
# Generates the plot
if(division=="none") {
plot <- ggplot(data=working_data, aes(x=Calendar.Year, y=entries)) +
geom_bar(stat="identity")
}
else {
plot <- ggplot(data=working_data, aes(x=Calendar.Year, y=entries, fill=gender)) +
geom_bar(stat="identity", position="fill") +
geom_hline(yintercept=0.5)
}
return(plot)
}
ui <- fluidPage(
titlePanel("Sunshine List Member Data"),
fluidRow(
column(3,
radioButtons(
"Stat_Display",
"Statistic Shown",
c(
"Count"="num",
"Average"="avg",
"Maximum"="max"
)
),
radioButtons(
"Division",
"Division",
c(
"Overall"="none",
"Gender"="gender"
)
)
)
),
fluidRow(
plotOutput("Sunshine_Display", height=600)
)
)
server <- function(input, output, session) {
observeEvent(input$Stat_Display, {
output$Sunshine_Display <- renderPlot(
get_data(input$Stat_Display, input$Division)
)
})
observeEvent(input$Division, {
output$Sunshine_Display <- renderPlot(
get_data(input$Stat_Display, input$Division)
)
})
}
shinyApp(ui, server)
library(onmaRg)
devtools::check_win_devel()
use_cran_comments()
?use_cran_comments
usethis::use_cran_comments(open = rlang::is_interactive())
library(onmaRg)
devtools::check_win_devel()
library(onmaRg)
devtools::check_win_devel()
.Last.error
library(onmaRg)
OnMarg_16_DA_df <- om_data(2016, "DAUID")
OnMarg_16_DA_sf <- om_geo(2016, "DAUID")
library(onmaRg)
devtools::check_win_devel()
library(onmaRg)
devtools::check_win_devel()
library(onmaRg)
library(onmaRg)
library(onmaRg)
data <- om_geo(2016, "DAUID")
View(data)
DA_2016 <- om_geo(2016, "DAUID") %>%
filter(CSDNAME == "Toronto")
library(ggplot2)
library(tidyverse)
library(onmaRg)
library(tidyverse)
DA_2016 <- om_geo(2016, "DAUID") %>%
filter(CSDNAME == "Toronto")
ggplot() +
geom_sf(data=DA_2016, aes(fill=DEPRIVATION_Q_DA16))
library(onmaRg)
devtools::check_win_devel()
library(onmaRg)
devtools::check_win_devel()
devtools::check_win_devel()
library(onmaRg)
OnMarg_16_DA_df <- om_data(2016, "DAUID")
OnMarg_16_DA_sf <- om_geo(2016, "DAUID")
?mutate
library(onmaRg)
x <- om_geo(2016, "DAUID")
x <- om_geo(2016, "DAUID", "sp")
str(x)
library(onmaRg)
x <- om_geo(2016, "DAUID", "sp")
library(onmaRg)
x <- om_geo(2016, "DAUID", "sp")
str(x)
View(x)
class(x)
?spPlot
??spplot
devtools::check_win_devel()
?as
?sf::as()
devtools::check_win_devel()
devtools::check_win_devel()
?sf::as
x <- om_geo(2016, "DAUID", "sp")
class(x)
View(x)
library(onmaRg)
devtools::check_win_devel()
library(onmaRg)
library(ggplot2)
# Load the data
DA_2016 <- om_geo(2016, "DAUID", "sf")
City_dat <- DA_2016 %>%
filter(CCSNAME == "Toronto")
# Convert the quintiles to a colour
color_convert <- function(n) {
return(c('red', 'orange', 'yellow', 'greenyellow', 'green')[n])
}
# Plot the data
ggplot() +
geom_sf(data=City_dat, fill=color_convert(City_dat$DEPRIVATION_Q_DA16))
library(onmaRg)
library(ggplot2)
# Load the data
DA_2016 <- om_geo(2016, "DAUID", "sf")
City_dat <- DA_2016 %>%
filter(CCSNAME == "Toronto")
# Convert the quintiles to a colour
color_convert <- function(n) {
return(c('red', 'orange', 'yellow', 'greenyellow', 'green')[n])
}
# Plot the data
ggplot() +
geom_sf(data=City_dat, fill=color_convert(City_dat$DEPRIVATION_Q_DA16))
ggplot() +
geom_sf(data=City_dat, fill=City_dat$DEPRIVATION_Q_DA16)
ggplot() +
geom_sf(data=City_dat, fill=DEPRIVATION_Q_DA16)
ggplot() +
geom_sf(data=City_dat, aes(fill=DEPRIVATION_Q_DA16))
ggplot(data=City_dat, aes(fill=DEPRIVATION_Q_DA16)) +
geom_sf()
library(onmaRg)
library(ggplot2)
?onmaRg
??onmaRg
?om_geo
library(onmaRg)
library(ggplot2)
library(onmaRg)
library(ggplot2)
DA_2016 <- om_geo(2016, "DAUID", "sf")
ggplot(data = DA_2016, aes(fill = DEPRIVATION_Q_DA16)) +
geom_sf()
DA_2016 <- om_geo(2016, "DAUID", "sf") %>%
filter(CSDNAME = "Toronto")
DA_Toronto <- DA_2016 %>%
filter(CSDNAME == "Toronto")
ggplot(data = DA_Toronto, aes(fill = DEPRIVATION_Q_DA16)) +
geom_sf()
library(onmaRg)
library(ggplot2)
?om_geo
DA_2016 <- om_geo(2016, "DAUID", "sf")
ggplot(data = DA_2016, aes(fill = DEPRIVATION_Q_DA16)) +
geom_sf()
DA_Toronto <- DA_2016 %>%
filter(DAUID == "Toronto")
ggplot(data = DA_Toronto, aes(fill = DEPRIVATION_Q_DA16)) +
geom_sf()
DA_2016 <- om_geo(2016, "DAUID", "sf")
library(RODBC)
install.packages("RODBC")
library(RODBC)
install.packages(RPostgreSQL)
install.packages("RPostgreSQL")
library(RPostgreSQL)
library(RPostgreSQL)
pw <- {
"admin"
}
drv <- dbDriver("PostgreSQL")
con <- dbConnect(
drv,
dbname = "localhost",
port = 5432,
user = "admin",
password = pw
)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(
drv,
dbname = "Assignment2",
port = 5432,
user = "postgres",
password = "admin"
)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(
drv,
dbname = "Assignment2",
port = 10228,
user = "postgres",
password = "admin"
)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(
drv,
dbname = "Assignment2",
port = 10228,
user = "postgres",
password = "admin"
)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(
drv,
dbname = "Assignment2",
port = 5432,
user = "postgres",
password = "admin"
)
library(onmaRg)
devtools::check_win_devel()
om_quint <- function(x) {
# Make bins to put values into
quint <- quantile(x, probs=seq(0,1,0.2), na.rm=TRUE)
new_x <- c()
for (i in 1:length(x)) {
# Return NA if value is NA
if (is.na(x[i])) {
new_x[i] <- NA
}
# Put value in appropriate bin
else {
for (j in 2:6) {
if (x[i] <= quint[j]) {
new_x[i] <- j - 1
break
}
}
}
}
return(new_x)
}
om_quint <- function(x) {
# Make bins to put values into
quint <- quantile(x, probs=seq(0,1,0.2), na.rm=TRUE)
new_x <- c()
for (i in 1:length(x)) {
# Return NA if value is NA
if (is.na(x[i])) {
new_x[i] <- NA
}
# Put value in appropriate bin
else {
for (j in 2:6) {
if (x[i] <= quint[j]) {
new_x[i] <- j - 1
break
}
}
}
}
return(new_x)
}
om_quint(c(1,2,3,4,5,6,7,8))
om_geo()
?stats
?quintile
?om_geo
??om_geo
library(onmaRg)
library(onmaRg)
library(onmaRg)
library(onmaRg)
devtools::check_win_devel()
library(onmaRg)
library(onmaRg)
library(onmaRg)
devtools::check_win_devel()
library(onmaRg)
